(function (e) { e.widget("ech.notify", { options: { speed: 500, expires: 5e3, stack: "below", custom: false, queue: false }, _create: function () { var t = this; this.templates = {}; this.keys = []; this.element.addClass("ui-notify").children().addClass("ui-notify-message ui-notify-message-style").each(function (n) { var r = this.id || n; t.keys.push(r); t.templates[r] = e(this).removeAttr("id").wrap("<div></div>").parent().html() }).end().empty().show() }, create: function (t, n, r) { if (typeof t === "object") { r = n; n = t; t = null } var i = this.templates[t || this.keys[0]]; if (r && r.custom) { i = e(i).removeClass("ui-notify-message-style").wrap("<div></div>").parent().html() } this.openNotifications = this.openNotifications || 0; return (new e.ech.notify.instance(this))._create(n, e.extend({}, this.options, r), i) } }); e.extend(e.ech.notify, { instance: function (e) { this.__super = e; this.isOpen = false } }); e.extend(e.ech.notify.instance.prototype, { _create: function (t, n, r) { this.options = n; var i = this, s = r.replace(/#(?:\{|%7B)(.*?)(?:\}|%7D)/g, function (e, n) { return n in t ? t[n] : "" }), o = this.element = e(s), u = o.find(".ui-notify-close"); if (typeof this.options.click === "function") { o.addClass("ui-notify-click").bind("click", function (e) { i._trigger("click", e, i) }) } if (u.length) { u.bind("click", function () { i.close(); return false }) } this.__super.element.queue("notify", function () { i.open(); if (typeof n.expires === "number" && n.expires > 0) { setTimeout(e.proxy(i.close, i), n.expires) } }); if (!this.options.queue || this.__super.openNotifications <= this.options.queue - 1) { this.__super.element.dequeue("notify") } return this }, close: function () { var t = this.options.speed; this.element.fadeTo(t, 0).slideUp(t, e.proxy(function () { this._trigger("close"); this.isOpen = false; this.element.remove(); this.__super.openNotifications -= 1; this.__super.element.dequeue("notify") }, this)); return this }, open: function () { if (this.isOpen || this._trigger("beforeopen") === false) { return this } var e = this; this.__super.openNotifications += 1; this.element[this.options.stack === "above" ? "prependTo" : "appendTo"](this.__super.element).css({ display: "none", opacity: "" }).fadeIn(this.options.speed, function () { e._trigger("open"); e.isOpen = true }); return this }, widget: function () { return this.element }, _trigger: function (e, t, n) { return this.__super._trigger.call(this, e, t, n) } }) })(jQuery)